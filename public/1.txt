1. 서론
✓ 최근 소프트웨어가 여러 산업의 기반이 됨
    ⮞ 정상 작동 여부를 시험하고 결함을 진단하는 테스팅의 중요성이 높아짐

✓ 테스트는 단위, 통합, 시스템 수준으로 단계적으로 이루어짐

✓ 시스템 테스트는 주로 UI 수준에서 이루어지는 Black Box 레벨

✓ 수많은 시간과 인력이 필요함

✓ 테스트 대상이 조금이라도 바뀌면 다시 해야 하는 작업

✓ 비 효율적인 테스트 프로세스의 효율성을 향상하기 위한 해결책으로 테스트 자동화 제시

✓ UI 수준의 시스템 테스트 자동화
    1. 사람이 직접 테스트 시나리오를 작성, 테스트 자동화 프레임워크를 사용하여 테스트 수행
    2. 테스터의 활동을 기록 후 스크립트로 저장하여 테스트 자동화 프레임워크에서 기록한 내용을 다시 수행하여 테스트하는 방법

✓ UI 수준의 시스템 테스트는 UI 요소를 테스트하는 작업
    ⮞ 따라서, 단순히 글을 보여주는 View보다는 사용자와 상호작용하는 요소가 상대적으로 오류가 많음

✓ 테스트 케이스를 자동으로 도출하려는 방법으로 모델 기반 테스트가 있음
    ⮞ UI 설계 모델, 유즈 케이스 다이어그램, 클래스 다이어그램, 상태 다이어그램
    ⮞ UI 수준의 테스트를 하기위해 적합한 모델은 UI 상태를 고려한 모델

2. 연구질문
※ UI 상호작용 요소를 이용한 상태 다이어그램을 사용한 테스트 자동화가 기 존 모델 기반 테스트보다 테스트 효율성이 높은가?
※ 제안된 UI 상호작용을 이용하여 시스템 테스트를 자동화하는 것이 다른 테 스트 자동화 기법보다 더 테스트에 효과적인가?

3. 관련 연구
✓ 관련 연구에서는 어떤 기법이 있는지, 해당 기법이 어떤 단계로 이루어지는 지 소개
    ⮞ 시스템 테스트, UI 기반 자동화 테스트

✓ 테스트 자동화 도구 소개
    ⮞ RPA, 스크립트 리스 자동화 테스팅 도구

3.1. 시스템 테스트 기법
✓ 유즈케이스 기반 테스트
    ⮞ 유즈케이스 명세서를 이용하여 테스트 케이스를 작성하는 방법
    ⮞ UML 유즈케이스 모델을 이용한 테스트

✓ UI 모델 기반 테스트
    ⮞ UI 모델로부터 추출된 이벤트 흐름 그래프를 이용하여 테스트 스크립트 작성

 ☛ 유즈케이스 기반 테스트의 경우 테스트 스크립트 생성에 한계가 있으며 유지보수가 어려움
    ⮞ Ex) 테스트 대상이 바뀌면 다시 해야 하는 작업
3.2. UI 기반 자동화 테스트
✓ 회귀테스트 자동화, 테스트 자동화

✓ 회귀 테스트는 테스트 케이스를 사람이 직접 작성을 하고 반복적인 수행만을 도구에 의존
    ⮞ 현재는 녹화 재생 방법이 개발되어 좀 더 쉽고 반복적인 수행만이 아닌 원하는 테스트에 대한 테스트 케이스를 작성가능

✓ 테스트 자동화는 테스트 케이스를 자동으로 생성하고 수행하는 모든 절차의 자동화

3.3. 테스트 자동화 도구
✓ RPA(Robotic Process Automation), 녹화재생(Record & Playback)

✓ RPA
    ⮞ RPA는 사람이 반복적이고 구조화된 작업을 수행하던 것을 소프트웨어 로 봇이 대신 수행하는 도구

✓ 녹화재생(Record & Playback)
    ⮞ 사용자가 녹화 기능을 킨 뒤 이벤트를 수행하면 해당 이벤트가 그대로 스크립트로 기록
    ⮞ 이벤트가 기록된 스크립트를 그대로 다시 재생하며 테스트

4. 연구 방법
1. UI 상호작용 요소 추출
    ⮞ Appium 프레임워크의 UI Automator2의 기능을 이용하여 XML 원시코드 추출
    ⮞ 추출한 원시코드는 요소의 속성, id, 좌표 등 정보가 있음

2. 상호작용 요소 식별 및 추출
    ⮞ XML 원시 코드 속 모든 요소에서 상호작용 요소를 추출
    ⮞ 요소의 속성을 다음 표를 보고 분석

3. 상호작용 요소의 동작 순서 추출
    1. 상태 다이어그램을 중간 형태의 그래프인 상태 차트 중간 그래프로 표현
        ⮞ 상태 다이어그램을 DFS(깊이 우선 탐색)을 통해 탐색 수행
        ⮞ 수행하며 추출된 신장트리에 노드와 간선에 상태와 트렌지션을 작성하여 상태 차트 중간 그래프 생성

    2. 상태 차트 중간 그래프를 RTP 기법을 이용하여 경로 탐색 수행
        ⮞ RTP 기법은 다른 기법보다 비교적 적은 개수의 테스트 케이스로 존재하는 상태, 트렌지션을 모두 커버함

4. 상호작용 요소의 순서를 이용한 테스트 생성
    ⮞ 추출된 트렌지션 경로와 상호작용 요소를 이용하여 테스트 케이스 생성

5. 실험 및 결과
✓ 실험 대상
    ⮞ 본 연구의 방법과 모델 기반 테스트, 설계 문서를 기반으로 테스트 스크립트를 자동 생성하는 테스트

✓ 온라인 쇼핑몰
    ⮞ 선글라스 목록, 책 목록, 기타 목록, 검색, 장바구니, 결제 등
✓ 테스트 케이스 경로 수, 커버리지, 검출된 오류 수, 테스트 케이스 작성 시간, 테스트 스크립트의 줄 수(LoC: Line of Code), 테스트 수행시간, 인시를 비교함

✓ 테스트 경로의 개수가 더 작으며 커버리지는 동일하며, 검출된 오류 수는 같음

✓ 모델 기반 테스트를 통해 테스트 스크립트를 작성하는데 걸리는 시간에 비해 제안하는 방법이 월등히 빠름

✓ 테스트 방법에 따른 테스트 스크립트의 줄 수와 테스트 수행시간을 비교한 丑

✓ UI 상호작용 요소를 이용하여 자동으로 스크립트를 생성한 테스트 스크립트의 코드 줄 수가 약 51% 적고, 테스트 수행에 걸리는 시간이 약 57% 빠른것을 확인함

✓ 테스트 방법에 따른 평가 결과(Man-Hour)
    ⮞ "Prepare"는 테스트 케이스, 스크립트 생성 등 테스트 준비 업무
    ⮞ "Excute"는 테스트를 실행하는 업무
    ⮞ "Check"은 시험 결과 확인 및 합격/불합격 결정과 관련된 업무

6. 결론
✓ 연구 질문 1에 대한 실험으로 기존 모델 기반 테스트와 제안하는 방법의 테스트 과정을 비교
    ⮞ 기존 방법은 통한 테스트 케이스, 스크립트 작성, 테스트 수행에 제안하는 방법과는 비교도 안 될 만큼 오래 걸림
    ⮞ 테스트 경로가 많으며 많은 테스트 경로로 인해 긴 테스트 스크립트가 작성됨
    ⮞ 따라서, 테스트 수행에 걸리는 시간이 제안하는 방법에 비해 2배 이상 소모

✓ 연구 질문 2에 대한 실험은 본 논문에서 제안하는 방법과 수동 접근 방법 그리고, [15]에서 제안하는 화면 설계 문서를 기반으로 테스트하는 방법의 인시(Man-Hour)를 비교

✓ 제안된 방법이 화면 설계 문서를 기반으로 테스트하는 방법에 비해 34%, 수동 접근 방법에 대해 67% 시간을 덜 소모하여 더욱 효과적임을 알 수 있었음 

✓ 사람이 작성하는 테스트 케이스, 스크립트는 규모가 커지면 커질수록 사람의 실수가 발생할 확률이 증가함 휴먼 오류(Human Error)가 존재하기 때문

✓ 제안하는 방법은 사람이 테스트 케이스, 스크립트를 직접 작성하지 않기 때문에 테스트 케이스, 스크립트 생성 알고리즘에 오류가 없다면 휴먼 오류가 없는 테스트를 할 수 있음

✓ 제안하는 방법은 사람이 테스트 케이스, 스크립트를 직접 작성하지 않기 때문에 테스트 케이스, 스크립트 생성 알고리즘에 오류가 없다면 휴먼 오류가 없는 테스트를 할 수 있음

Q&A